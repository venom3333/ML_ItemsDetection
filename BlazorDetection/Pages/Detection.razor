@page "/detection"

@using BlazorDetection.Data
@using System.IO
@using System.Diagnostics
@using System.Drawing;

@inject DetectionService DetectionService

<h1>Detection</h1>

<MatFileUpload OnChange="FileReady"></MatFileUpload>
<textarea style="width: 100%; max-height: 300px; height: 300px;">@fileContent</textarea>

@code {

    string fileContent;

    async Task FileReady(IMatFileUploadEntry[] files)
    {
        try
        {
            List<Image> images = new List<Image>();
            foreach (var file in files)
            {
                if (file == null)
                {
                    continue;
                }

                using (var stream = new MemoryStream())
                {
                    var sw = Stopwatch.StartNew();
                    await file.WriteToStreamAsync(stream);
                    sw.Stop();

                    Console.WriteLine($"Name:\t{file.Name}\r\n");
                    Console.WriteLine($"Type:\t{file.Type}\r\n");
                    Console.WriteLine($"LastModified:\t{file.LastModified}\r\n");
                    Console.WriteLine($"Size:\t{file.Size}\r\n");
                    Console.WriteLine($"Time:\t{sw.Elapsed}\r\n");
                    Console.WriteLine($"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n");

                    //stream.Seek(0, SeekOrigin.Begin);
                    var image = Image.FromStream(stream);
                    images.Add(image);
                }
            }
            await DetectionService.DetectAsync(images);
        }

        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(async () => { this.StateHasChanged(); });
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }
}
